/*
 * This file is generated by jOOQ.
 */
package com.nacho.blog.jooq.jooqdemo.gen.tables;


import com.nacho.blog.jooq.jooqdemo.gen.Jooq;
import com.nacho.blog.jooq.jooqdemo.gen.Keys;
import com.nacho.blog.jooq.jooqdemo.gen.tables.records.TShipmentRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TShipment extends TableImpl<TShipmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.t_shipment</code>
     */
    public static final TShipment T_SHIPMENT = new TShipment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TShipmentRecord> getRecordType() {
        return TShipmentRecord.class;
    }

    /**
     * The column <code>jooq.t_shipment.id</code>.
     */
    public final TableField<TShipmentRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>jooq.t_shipment.total</code>.
     */
    public final TableField<TShipmentRecord, BigDecimal> TOTAL = createField(DSL.name("total"), SQLDataType.DECIMAL(9, 2).nullable(false), this, "");

    private TShipment(Name alias, Table<TShipmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TShipment(Name alias, Table<TShipmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.t_shipment</code> table reference
     */
    public TShipment(String alias) {
        this(DSL.name(alias), T_SHIPMENT);
    }

    /**
     * Create an aliased <code>jooq.t_shipment</code> table reference
     */
    public TShipment(Name alias) {
        this(alias, T_SHIPMENT);
    }

    /**
     * Create a <code>jooq.t_shipment</code> table reference
     */
    public TShipment() {
        this(DSL.name("t_shipment"), null);
    }

    public <O extends Record> TShipment(Table<O> child, ForeignKey<O, TShipmentRecord> key) {
        super(child, key, T_SHIPMENT);
    }

    @Override
    public Schema getSchema() {
        return Jooq.JOOQ;
    }

    @Override
    public UniqueKey<TShipmentRecord> getPrimaryKey() {
        return Keys.KEY_T_SHIPMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TShipmentRecord>> getKeys() {
        return Arrays.<UniqueKey<TShipmentRecord>>asList(Keys.KEY_T_SHIPMENT_PRIMARY);
    }

    @Override
    public TShipment as(String alias) {
        return new TShipment(DSL.name(alias), this);
    }

    @Override
    public TShipment as(Name alias) {
        return new TShipment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TShipment rename(String name) {
        return new TShipment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TShipment rename(Name name) {
        return new TShipment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
